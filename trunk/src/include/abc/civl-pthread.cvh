#ifdef __CIVLPTHREAD__
#else
#define __CIVLPTHREAD__

#include <civlc.cvh>
#include <pthread.h>

// types
/* A global pthread pool which must only be operated by local pthread pool. */
typedef struct _pthread_gpool_t * $pthread_gpool_t;

/* A datatype representing a local pthread pool which is used for 
 * operating global pthread pools. The local pthread pool type has 
 * a handle of a global pthread pool.
 */
typedef struct _pthread_pool_t * $pthread_pool_t;

// Function Prototypes
//void _pthread_exit(void *, _Bool);

/* ************************** Functions of $pthread_gpool ************************** */

/* Creates a new global pthread pool and returns a handle to it.
 * The global pthread will have an incomplete array of pthread constructs. */
$pthread_gpool_t $pthread_gpool_create($scope scope);

/* De-allocation a _pthread_gpool_t object */
void $pthread_gpool_destroy($pthread_gpool_t gpool);

void $pthread_gpool_add($pthread_gpool_t gpool, pthread_t * thread);

/* Gets the size of the global thread pool */
int $pthread_gpool_size($pthread_gpool_t gpool);

/* Gets the PID of the index'th thread in the pool */
$proc $pthread_gpool_thread($pthread_gpool_t gpool, int index);

/* *************************** Functions of $pthread_pool ************************** */

/* Creates a new local pthread pool object and returns a handle to it. */
$pthread_pool_t $pthread_pool_create($scope scope, $pthread_gpool_t gpool);

/* Terminates this thread */
void $pthread_pool_terminates($pthread_pool_t pool);

_Bool $pthread_pool_get_terminated($pthread_pool_t pool);

_Bool $pthread_pool_is_terminated($pthread_pool_t pool, $proc pid);

/* De-allocation a _pthread_gpool_t object */
void $pthread_pool_destroy($pthread_pool_t pool);


#endif
