#ifndef __CIVLMPI__
#define __CIVLMPI__

#include <civlc.cvh>
#include <comm.cvh>
#include <bundle.cvh>

#define BCAST_TAG        9999
#define REDUCE_TAG       9998
#define ALLREDUCE_TAG    9997
#define GATHER_TAG       9996
#define SCATTER_TAG      9995
#define GATHERV_TAG      9994
#define SCATTERV_TAG     9993
#define ALLGATHER_TAG    9992
#define RED_SCATTER_TAG  9991
#define ALLTOALL_TAG     9990
#define ALLTOALLV_TAG    9989
#define ALLTOALLW_TAG    9988
#define BARRIER_TAG      9987
#define COMMDUP_TAG      9986
#define COMMFREE_TAG     9985

/* Definition of CIVL-MPI */
typedef enum __MPI_Sys_status__{
  __UNINIT,
  __INIT,
  __FINALIZED
}__MPI_Sys_status__;

/**************************** Redundent Definitions *******************************/
/* The independence between civlmpi.cvh and mpi.h causes redundent definition */
typedef struct MPI_Comm MPI_Comm;
#ifdef __MPI__
#else
typedef struct MPI_Status MPI_Status;
#endif

#ifdef __MPI_DATATYPE__
#else
#define __MPI_DATATYPE__
typedef enum {
    MPI_CHAR,
    MPI_CHARACTER,
    MPI_SIGNED_CHAR,           
    MPI_UNSIGNED_CHAR,
    MPI_BYTE,           
    MPI_WCHAR,          
    MPI_SHORT,          
    MPI_UNSIGNED_SHORT,
    MPI_INT,            
    MPI_INT16_T,
    MPI_INT32_T,
    MPI_INT64_T,
    MPI_INT8_T,
    MPI_INTEGER,
    MPI_INTEGER1,
    MPI_INTEGER16,
    MPI_INTEGER2,
    MPI_INTEGER4,
    MPI_INTEGER8,
    MPI_UNSIGNED,       
    MPI_LONG,          
    MPI_UNSIGNED_LONG, 
    MPI_FLOAT,          
    MPI_DOUBLE,         
    MPI_LONG_DOUBLE,
    MPI_LONG_LONG_INT,  
    MPI_UNSIGNED_LONG_LONG,
    MPI_LONG_LONG,
    MPI_PACKED,
    MPI_LB,
    MPI_UB,
    MPI_UINT16_T,
    MPI_UINT32_T,
    MPI_UINT64_T,
    MPI_UINT8_T,
    MPI_FLOAT_INT,        
    MPI_DOUBLE_INT,       
    MPI_LONG_INT,         
    MPI_SHORT_INT,        
    MPI_2INT,             
    MPI_LONG_DOUBLE_INT,  
    MPI_AINT,
    MPI_OFFSET,
    MPI_2DOUBLE_PRECISION,
    MPI_2INTEGER,
    MPI_2REAL,
    MPI_C_BOOL,
    MPI_C_COMPLEX,
    MPI_C_DOUBLE_COMPLEX,
    MPI_C_FLOAT_COMPLEX,
    MPI_C_LONG_DOUBLE_COMPLEX,
    MPI_COMPLEX,
    MPI_COMPLEX16,
    MPI_COMPLEX32,
    MPI_COMPLEX4,
    MPI_COMPLEX8,
    MPI_REAL,
    MPI_REAL16,
    MPI_REAL2,
    MPI_REAL4,
    MPI_REAL8
} MPI_Datatype;
#endif

/* Definition of CMPI_Gcomm and MPI_Comm */
typedef struct CMPI_Gcomm CMPI_Gcomm;

/****************************** Helper Functions **********************************/
int sizeofDatatype(MPI_Datatype);

void CMPI_Set_status(__MPI_Sys_status__ newStatus);

__MPI_Sys_status__ CMPI_Get_status(void);

/************************** MPI LIB Implementations *******************************/
$abstract double CMPI_time(int i);

CMPI_Gcomm CMPI_Gcomm_create($scope, int);

void CMPI_Gcomm_destroy(CMPI_Gcomm);

MPI_Comm CMPI_Comm_create($scope, CMPI_Gcomm , int);

void CMPI_Comm_destroy(MPI_Comm);

int _MPI_Init(void);

int _MPI_Finalize(void);

int CMPI_Send(const void *, int, MPI_Datatype, int, int, $comm);

int CMPI_Recv(void *, int, MPI_Datatype, int, int, $comm, MPI_Status *);

int CMPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
		  int dest, int sendtag, void *recvbuf, int recvcount, 
		  MPI_Datatype recvtype, int source, int recvtag,
		  $comm comm, MPI_Status *status);

int CMPI_Collective_recv(void *, int, MPI_Datatype, int, int, $comm, MPI_Status *, 
			 char *);

int CMPI_Bcast(void *, int, MPI_Datatype, int, int, MPI_Comm, char *);

int CMPI_Reduce(const void*, void*, int,
		MPI_Datatype, MPI_Op, int, int,
		MPI_Comm, char *);

int CMPI_Gather(const void*, int, MPI_Datatype, 
	       void*, int, MPI_Datatype, int, int, MPI_Comm, char *);

int CMPI_Gatherv(const void*, int, MPI_Datatype,
		void*, const int[], const int[],
		 MPI_Datatype, int, int, 
		 MPI_Comm, char *);

int CMPI_Scatter(const void*, int, MPI_Datatype, 
		 void*, int, MPI_Datatype, int,
		 int, MPI_Comm, char *);

int CMPI_Scatterv(const void*, const int[], const
		 int[], MPI_Datatype, void* ,
		 int, MPI_Datatype, int, int,
		  MPI_Comm, char *);

void* CMPI_PointerAdd(void*, int, MPI_Datatype);

int CMPI_NewGcomm($scope, CMPI_Gcomm);

CMPI_Gcomm CMPI_GetGcomm($scope, int);

int CMPI_Comm_dup($scope, MPI_Comm, MPI_Comm *, char *);

int CMPI_Comm_free(MPI_Comm *);

$scope CMPI_Root_scope($comm);

$scope CMPI_Proc_scope($comm);

/* Assert that the size of the primitive type of the object pointed
   'buf' is consistent with the size of the given MPI_Datatype */
void CMPI_AssertConsistentType(void * buf, MPI_Datatype datatype);

/* Create a $bundle type object which contains a sequence of entries
   that identify a group of consistent MPI collective routines. MPI
   collective routines should be reached by every process in the same
   communicator with the same order 
   Arguments:
   comm: the MPI communicator all the processes are belong to.
   routineTag: the tag indicating a collective routine.
   root: rank of the root process
   op: a int type object representing the enumerator of the MPI_Op, 
       if MPI_Op is not part of the arguments of the collective routine, 
       this argument should be set 0.
   numDatatypes: the number of datatypes involved in the messages.
   datatypes: the datatype array stores datatypes enumerators involved in 
              the message.
*/
$bundle CMPI_CreateCoroutineEntries(int routineTag, int root, 
				    int op, int numDatatypes, int * datatypes);
#endif



