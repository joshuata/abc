/* This header file contains the function prototypes for 
 * pointer operations.
 */

#ifdef __POINTER__
#else
#define __POINTER__

/* ******************************* Functions ******************************* */

/* are the object pointed to equal? */
_Bool $equals(void *x, void *y);

/* Semantics: Does the object pointed to by obj1 contain that
pointed to by obj1? */
_Bool $contains(void *obj1, void *obj2);

/* Translates a pointer into one object to a pointer
 * into a different object with similar structure. */
void * $translate_ptr(void *ptr, void *obj);

/* Copies the value pointed to by the right operand to the memory 
 * location specified by the left operand. */
void $copy(void *ptr, void *value);

/*
  copy the references to the leaf nodes of obj to the given array
  obj: pointer to type T' whose leaf node types are all type T
  array: pointer to array of pointer to type T
*/
void $leaf_node_ptrs(void *array, void *obj);

/*
  returns true if the given pointer is referencing to 
  an object by identity reference
*/
_Bool $is_identity_ref(void *obj);

/*
  updates the leaf nodes of the given objects to with
  the given integer value
*/
void $set_leaf_nodes(void *obj, int value);

/*
  returns true iff all leaf nodes of the given
  object equal to the given value
*/
_Bool $leaf_nodes_equal_to(void *obj, int value);

#endif
