<!--
    build.xml : Ant build file for ABC
    Author: Stephen F. Siegel, University of Delaware
    Last modified: 03-Jun-2012
    
    The following can be defined on command line with -Dprop=val:
    revision.  This is for the use of our SVN commit hook, which 
    runs the test suite and performs other tasks every time a commit
    is made.  The SVN revision number is just used here to insert
    into reports.
-->

<project name="ABC" basedir="." default="jar" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- Directories -->

	<property file="build_default.properties" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="real.src.dir" value="${src.dir}/edu/udel/cis/vsl/abc" />
	<property name="bin.dir" value="${basedir}/bin" />
	<property name="grammar.dir" value="${basedir}/grammar" />
	<property name="javadoc.dir" value="${basedir}/doc/javadoc" />
	<property name="jar-name" value="abc.jar" />
	<property name="jar-path" value="${basedir}/${jar-name}" />
	<property name="main-class" value="edu.udel.cis.vsl.abc.ABC" />

	<!-- Junit and JaCoCo Coverage  -->

	<property name="test.src.dir" location="${basedir}/test" />
	<property name="test.bin.dir" location="${basedir}/bin-test" />
	<property name="junit.dir" location="${basedir}/junit" />
	<property name="junit.data.dir" location="${junit.dir}/data" />
	<property name="junit.reports.dir" location="${junit.dir}/reports" />
	<property name="coverage.dir" location="${basedir}/coverage" />
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.jar}" />
	</taskdef>

	<!-- Running ANTLR -->

	<path id="antlr.class.path">
		<pathelement location="${antlr.jar}" />
	</path>

	<target name="parsers" depends="CivlCParser,PreprocessorExpressionParser,PreprocessorParser,PreprocessorLexer">
	</target>

	<target name="checkCivlCParserChanges">
		<uptodate property="noCivlCParserChanges">
			<srcfiles file="${grammar.dir}/CivlCParser.g" />
			<srcfiles file="${grammar.dir}/PreprocessorLexer.g" />
			<srcfiles file="${grammar.dir}/PreprocessorLexer.tokens" />
			<srcfiles file="${grammar.dir}/PreprocessorParser.g" />
			<srcfiles file="${grammar.dir}/PreprocessorParser.tokens" />
			<mapper type="merge" to="${real.src.dir}/parse/common/CivlCParser.java" />
		</uptodate>
	</target>

	<target name="CivlCParser" depends="PreprocessorParser,checkCivlCParserChanges" unless="noCivlCParserChanges">
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="CivlCParser.g" />
		</java>
		<move file="${grammar.dir}/CivlCParser.java" todir="${real.src.dir}/parse/common" />
	</target>

	<target name="checkExpressionParserChanges">
		<uptodate property="noExpressionParserChanges">
			<srcfiles file="${grammar.dir}/PreprocessorExpressionParser.g" />
			<srcfiles file="${grammar.dir}/PreprocessorLexer.g" />
			<srcfiles file="${grammar.dir}/PreprocessorLexer.tokens" />
			<mapper type="merge" to="${real.src.dir}/preproc/common/PreprocessorExpressionParser.java" />
		</uptodate>
	</target>

	<target name="PreprocessorExpressionParser" depends="PreprocessorLexer,checkExpressionParserChanges" unless="noExpressionParserChanges">
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="PreprocessorExpressionParser.g" />
		</java>
		<move file="${grammar.dir}/PreprocessorExpressionParser.java" todir="${real.src.dir}/preproc/common" />
	</target>

	<target name="checkParserChanges">
		<uptodate property="noParserChanges">
			<srcfiles file="${grammar.dir}/PreprocessorParser.g" />
			<srcfiles file="${grammar.dir}/PreprocessorLexer.g" />
			<srcfiles file="${grammar.dir}/PreprocessorLexer.tokens" />
			<mapper type="merge" to="${real.src.dir}/preproc/common/PreprocessorParser.java" />
		</uptodate>
	</target>

	<target name="PreprocessorParser" depends="PreprocessorLexer,checkParserChanges" unless="noParserChanges">
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="PreprocessorParser.g" />
		</java>
		<move file="${grammar.dir}/PreprocessorParser.java" todir="${real.src.dir}/preproc/common" />
	</target>

	<target name="checkLexerChanges">
		<uptodate property="noLexerChanges">
			<srcfiles file="${grammar.dir}/PreprocessorLexer.g" />
			<compositemapper>
				<mapper type="merge" to="${grammar.dir}/PreprocessorLexer.tokens" />
				<mapper type="merge" to="${real.src.dir}/preproc/common/PreprocessorLexer.java" />
			</compositemapper>
		</uptodate>
	</target>

	<target name="PreprocessorLexer" depends="checkLexerChanges" unless="noLexerChanges">
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="PreprocessorLexer.g" />
		</java>
		<move file="${grammar.dir}/PreprocessorLexer.java" todir="${real.src.dir}/preproc/common" />
	</target>


	<!-- Source compilation and JAR construction -->

	<path id="src.compile.classpath">
		<pathelement location="${src.dir}" />
		<pathelement location="${antlr.jar}" />
	</path>

	<target name="compile" description="Compile all java source files." depends="parsers">
		<mkdir dir="${bin.dir}" />
		<javac debug="true" srcdir="${src.dir}" destdir="${bin.dir}" includes="edu/udel/cis/vsl/abc/**" classpathref="src.compile.classpath" encoding="UTF-8" includeantruntime="false">
		</javac>
	</target>

	<target name="jar" depends="compile" description="Jar up all class files.">
		<jar destfile="${jar-path}">
			<fileset dir="${bin.dir}" />
			<!--<fileset dir="${antlr.runtime.bin}" />-->
			<zipfileset includes="**/*.class" src="${antlr.runtime.jar}" />
			<fileset dir="${basedir}/text/include" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
		</jar>
	</target>

	<!-- Plain JUnit tests -->

	<path id="test.compile.classpath">
		<pathelement location="${test.src.dir}" />
		<pathelement location="${bin.dir}" />
		<pathelement location="${antlr.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${hamcrest.jar}" />
	</path>

	<path id="test.execute.classpath">
		<pathelement location="${test.bin.dir}" />
		<pathelement location="${bin.dir}" />
		<pathelement location="${antlr.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${basedir}/text/include" />
		<pathelement location="${hamcrest.jar}" />
	</path>

	<target name="test-init">
		<delete dir="${junit.dir}" quiet="true" />
		<delete dir="${test.bin.dir}" quiet="true" />
		<mkdir dir="${junit.dir}" />
		<mkdir dir="${junit.data.dir}" />
		<mkdir dir="${junit.reports.dir}" />
		<mkdir dir="${test.bin.dir}" />
	</target>

	<target name="test-compile" depends="compile,test-init">
		<javac destdir="${test.bin.dir}" debug="true" failonerror="false" classpathref="test.compile.classpath" encoding="UTF-8" includeantruntime="true">
			<src path="${test.src.dir}" />
		</javac>
	</target>

	<target name="test-run" depends="test-compile">
		<jacoco:coverage>
			<junit fork="true" forkmode="once" timeout="300000">
				<jvmarg value="-ea" />
				<classpath refid="test.execute.classpath" />
				<formatter type="brief" usefile="false" />
				<formatter type="xml" />
				<batchtest todir="${junit.data.dir}">
					<fileset dir="${test.bin.dir}" includes="**/*Test.class" />
				</batchtest>
			</junit>
		</jacoco:coverage>
		<junitreport todir="${junit.data.dir}">
			<fileset dir="${junit.data.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.reports.dir}">
				<param name="TITLE" expression="JUnit Report for ABC ${revision}" />
			</report>
		</junitreport>
	</target>

	<target name="test" depends="test-run">
		<jacoco:report>
			<executiondata>
				<file file="jacoco.exec" />
			</executiondata>
			<structure name="Test Coverage Report for ABC ${revision}">
				<classfiles>
					<fileset dir="${bin.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>
			<html destdir="coverage" />
		</jacoco:report>
	</target>

	<!-- Javadoc Tasks -->

	<target name="javadoc">
		<delete dir="${javadoc.dir}" quiet="true" />
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}" Overview="src/overview.html" author="false" version="true" use="true" windowtitle="API for ABC ${revision}" access="public" classpathref="test.execute.classpath" sourcepath="${src.dir}" failonerror="false">
		</javadoc>
	</target>

	<!-- Clean -->

	<target name="clean" description="Delete all generated files.">
		<delete dir="${bin.dir}" />
		<delete dir="${test.bin.dir}" />
		<delete dir="${junit.dir}" />
		<delete dir="${javadoc.dir}" />
		<delete dir="${coverage.dir}" />
		<delete file="${jar-path}" />
		<delete file="${basedir}/jacoco.exec" />
		<delete file="${manifest-file}" />
		<delete file="${grammar.dir}/PreprocessorLexer.tokens" />
		<delete file="${real.src.dir}/preproc/PreprocessorLexer.java" />
		<delete file="${grammar.dir}/PreprocessorParser.tokens" />
		<delete file="${real.src.dir}/preproc/PreprocessorParser.java" />
		<delete file="${grammar.dir}/PreprocessorExpressionParser.tokens" />
		<delete file="${real.src.dir}/preproc/expr/PreprocessorExpressionParser.java" />
	</target>

	<!-- Do everything -->

	<target name="all" depends="jar,test,javadoc" />

</project>
