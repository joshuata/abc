<!--
    build.xml : Ant build file for ABC
    Author: Stephen F. Siegel, University of Delaware
    Last modified: 03-Jun-2012
    
    The following can be defined on command line with -Dprop=val:
    revision.  This is for the use of our SVN commit hook, which 
    runs the test suite and performs other tasks every time a commit
    is made.  The SVN revision number is just used here to insert
    into reports.
-->

<project name="ABC" basedir="." default="jar" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- Directories -->
	<condition property="properties.file" value="build.properties" else="build_default.properties">
		<available file="build.properties" />
	</condition>
	<property file="${properties.file}" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="real.src.dir" value="${src.dir}/edu/udel/cis/vsl/abc" />
	<property name="bin.dir" value="${basedir}/bin" />
	<property name="grammar.dir" value="${basedir}/grammar" />
	<property name="javadoc.dir" value="${basedir}/doc/javadoc" />
	<property name="jar-name" value="abc.jar" />
	<property name="jar-path" value="${basedir}/${jar-name}" />
	<property name="main-class" value="edu.udel.cis.vsl.abc.ABC" />

	<!-- Junit and JaCoCo Coverage  -->

	<property name="test.src.dir" location="${basedir}/test" />
	<property name="test.bin.dir" location="${basedir}/bin-test" />
	<property name="junit.dir" location="${basedir}/junit" />
	<property name="junit.data.dir" location="${junit.dir}/data" />
	<property name="junit.reports.dir" location="${junit.dir}/reports" />
	<property name="coverage.dir" location="${basedir}/coverage" />
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.jar}" />
	</taskdef>

	<!-- Running ANTLR -->

	<path id="antlr.class.path">
		<pathelement location="${antlr.jar}" />
	</path>

	<target name="parsers" depends="PreprocessorExpressionParser,CivlCParser,OmpParser">
	</target>

	<!--
		PreprocessorLexer.java should be built if PreprocessorLexer.g
		is newer than PreprocessorLexer.java
	-->

	<target name="PreprocessorLexerDependencies">
		<uptodate property="PreprocessorLexerUpToDate" srcfile="${grammar.dir}/PreprocessorLexer.g" targetfile="${real.src.dir}/preproc/common/PreprocessorLexer.java" />
	</target>

	<target name="PreprocessorLexer" depends="PreprocessorLexerDependencies" unless="PreprocessorLexerUpToDate">
		<delete file="${grammar.dir}/PreprocessorParser.tokens" />
		<delete file="${real.src.dir}/preproc/common/PreprocessorLexer.java" />
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="PreprocessorLexer.g" />
		</java>
		<move file="${grammar.dir}/PreprocessorLexer.java" todir="${real.src.dir}/preproc/common" />
	</target>

	<!--
		PreprocessorParser.java should be built if PreprocessorParser.g
		is newer than PreprocessorParser.java OR PreprocessorLexer.java
		is newer than PreprocessorParser.java.
		
		BUT: you only want to check if PreprocessorLexer.java is newer
		than PreprocessorParser.java AFTER the lexer things happens.
	-->

	<target name="PreprocessorParserDependencies" depends="PreprocessorLexer">
		<uptodate property="unchangedPreprocessorParserGrammar" srcfile="${grammar.dir}/PreprocessorParser.g" targetfile="${real.src.dir}/preproc/common/PreprocessorParser.java" />
		<uptodate property="PreprocessorLexerBeforePreprocessorParser" srcfile="${real.src.dir}/preproc/common/PreprocessorLexer.java" targetfile="${real.src.dir}/preproc/common/PreprocessorParser.java" />
		<condition property="PreprocessorParserUpToDate">
			<and>
				<isset property="unchangedPreprocessorParserGrammar" />
				<isset property="PreprocessorLexerBeforePreprocessorParser" />
			</and>
		</condition>
	</target>

	<target name="PreprocessorParser" depends="PreprocessorParserDependencies" unless="PreprocessorParserUpToDate">
		<delete file="${grammar.dir}/PreprocessorParser.tokens" />
		<delete file="${real.src.dir}/preproc/common/PreprocessorParser.java" />
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="PreprocessorParser.g" />
		</java>
		<move file="${grammar.dir}/PreprocessorParser.java" todir="${real.src.dir}/preproc/common" />
	</target>

	<!--
		PreprocessorExpressionParser.java should be built if PreprocessorExpressionParser.g
		is newer than PreprocessorExpressionParser.java OR PreprocessorLexer.java
		is newer than PreprocessorExpressionParser.java.
	-->

	<target name="PreprocessorExpressionParserDependencies" depends="PreprocessorLexer">
		<uptodate property="unchangedPreprocessorExpressionParserGrammar" srcfile="${grammar.dir}/PreprocessorExpressionParser.g" targetfile="${real.src.dir}/preproc/common/PreprocessorExpressionParser.java" />
		<uptodate property="PreprocessorLexerBeforePreprocessorExpressionParser" srcfile="${real.src.dir}/preproc/common/PreprocessorLexer.java" targetfile="${real.src.dir}/preproc/common/PreprocessorExpressionParser.java" />
		<condition property="PreprocessorExpressionParserUpToDate">
			<and>
				<isset property="unchangedPreprocessorExpressionParserGrammar" />
				<isset property="PreprocessorLexerBeforePreprocessorExpressionParser" />
			</and>
		</condition>
	</target>

	<target name="PreprocessorExpressionParser" depends="PreprocessorExpressionParserDependencies" unless="PreprocessorExpressionParserUpToDate">
		<delete file="${grammar.dir}/PreprocessorExpressionParser.tokens" />
		<delete file="${real.src.dir}/preproc/common/PreprocessorExpressionParser.java" />
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="PreprocessorExpressionParser.g" />
		</java>
		<move file="${grammar.dir}/PreprocessorExpressionParser.java" todir="${real.src.dir}/preproc/common" />
	</target>


	<!--
		CivlCParser.java depends on CivlCParser.g and PreprocessorParser.java
	-->

	<target name="CivlCParserDependencies" depends="PreprocessorParser">
		<uptodate property="unchangedCivlCParserGrammar" srcfile="${grammar.dir}/CivlCParser.g" targetfile="${real.src.dir}/parse/common/CivlCParser.java" />
		<uptodate property="PreprocessorParserBeforeCivlCParser" srcfile="${real.src.dir}/preproc/common/PreprocessorParser.java" targetfile="${real.src.dir}/parse/common/CivlCParser.java" />
		<condition property="CivlCParserUpToDate">
			<and>
				<isset property="unchangedCivlCParserGrammar" />
				<isset property="PreprocessorParserBeforeCivlCParser" />
			</and>
		</condition>
	</target>

	<target name="CivlCParser" depends="CivlCParserDependencies" unless="CivlCParserUpToDate">
		<delete file="${grammar.dir}/CivlCParser.tokens" />
		<delete file="${real.src.dir}/parse/common/CivlCParser.java" />
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="CivlCParser.g" />
		</java>
		<move file="${grammar.dir}/CivlCParser.java" todir="${real.src.dir}/parse/common" />
	</target>


	<!--
		OmpLexer is a composite grammar.
		It is needed only for its tokens.  The java file can be
		thrown away.
		OmpLexer.tokens depends on OmpLexer.g and CivlCParser.tokens.
	-->

	<target name="OmpLexerDependencies" depends="CivlCParser">
		<uptodate property="unchangedOmpLexerGrammar" srcfile="${grammar.dir}/OmpLexer.g" targetfile="${grammar.dir}/OmpLexer.tokens" />
		<uptodate property="CivlCParserTokensBeforeOmpLexer" srcfile="${grammar.dir}/CivlCParser.tokens" targetfile="${grammar.dir}/OmpLexer.tokens" />
		<condition property="OmpLexerUpToDate">
			<and>
				<isset property="unchangedOmpLexerGrammar" />
				<isset property="CivlCParserTokensBeforeOmpLexer" />
				<!--<isset property="PreprocessorLexerBeforeOmpLexer" />-->
			</and>
		</condition>
	</target>

	<target name="OmpLexer" depends="OmpLexerDependencies" unless="OmpLexerUpToDate">
		<delete file="${grammar.dir}/OmpLexer.tokens" />
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="OmpLexer.g" />
		</java>
		<delete file="${grammar.dir}/OmpLexer.java" />
	</target>

	<!--
		OmpParser is a composite grammar.
		OmpParser.java depends on OmpParser.g, OmpLexer.tokens,
		and CivlCParser.java.  It also requires inserting some text
		at beginning manually.
	-->

	<target name="OmpParserDependencies" depends="OmpLexer,CivlCParser">
		<uptodate property="unchangedOmpParserGrammar" srcfile="${grammar.dir}/OmpParser.g" targetfile="${real.src.dir}/parse/common/OmpParser.java" />
		<uptodate property="OmpLexerBeforeOmpParser" srcfile="${grammar.dir}/OmpLexer.tokens" targetfile="${real.src.dir}/parse/common/OmpParser.java" />
		<uptodate property="CivlCParserBeforeOmpParser" srcfile="${real.src.dir}/parse/common/CivlCParser.java" targetfile="${real.src.dir}/parse/common/OmpParser.java" />
		<condition property="OmpParserUpToDate">
			<and>
				<isset property="unchangedOmpParserGrammar" />
				<isset property="OmpLexerBeforeOmpParser" />
				<isset property="CivlCParserBeforeOmpParser" />
			</and>
		</condition>
	</target>

	<target name="OmpParser" depends="OmpParserDependencies" unless="OmpParserUpToDate">
		<java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true" failonerror="true" dir="${grammar.dir}">
			<arg value="-verbose" />
			<arg value="OmpParser.g" />
		</java>
		<move file="${grammar.dir}/OmpParser.java" tofile="${grammar.dir}/OmpParser2.java" />
		<echo message="package edu.udel.cis.vsl.abc.parse.common;${line.separator}import edu.udel.cis.vsl.abc.parse.IF.RuntimeParseException;${line.separator}import edu.udel.cis.vsl.abc.preproc.common.*;${line.separator}${line.separator}" file="${grammar.dir}/OmpParser.java" />
		<concat destfile="${grammar.dir}/OmpParser.java" append="true">
			<filelist dir="${grammar.dir}" files="OmpParser2.java" />
		</concat>
		<delete file="${grammar.dir}/OmpParser2.java" />
		<move file="${grammar.dir}/OmpParser.java" todir="${real.src.dir}/parse/common" />
		<move file="${grammar.dir}/OmpParser_CivlCParser.java" todir="${real.src.dir}/parse/common" />

	</target>


	<!-- Source compilation and JAR construction -->

	<path id="src.compile.classpath">
		<pathelement location="${src.dir}" />
		<pathelement location="${antlr.jar}" />
		<pathelement location="${sarl.jar}" />
	</path>

	<target name="compile" description="Compile all java source files." depends="parsers">
		<mkdir dir="${bin.dir}" />
		<javac debug="true" srcdir="${src.dir}" destdir="${bin.dir}" classpathref="src.compile.classpath" encoding="UTF-8" includeantruntime="false">
		</javac>
		<copy todir="${bin.dir}/include">
			<fileset dir="${src.dir}/include" />
		</copy>
	</target>

	<target name="jar" depends="compile" description="Jar up class files and header files">
		<jar destfile="${jar-path}">
			<fileset dir="${bin.dir}" />
			<zipfileset includes="**/*.class" src="${antlr.runtime.jar}" />
			<zipfileset includes="**/*.class" src="${sarl.jar}" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
		</jar>
	</target>

	<!-- Plain JUnit tests -->

	<path id="test.compile.classpath">
		<pathelement location="${test.src.dir}" />
		<pathelement location="${bin.dir}" />
		<pathelement location="${antlr.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${hamcrest.jar}" />
		<pathelement location="${sarl.jar}" />
	</path>

	<path id="test.execute.classpath">
		<pathelement location="${test.bin.dir}" />
		<pathelement location="${bin.dir}" />
		<pathelement location="${antlr.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${src.dir}" />
		<pathelement location="${hamcrest.jar}" />
		<pathelement location="${sarl.jar}" />
	</path>

	<target name="test-init">
		<delete dir="${junit.dir}" quiet="true" />
		<delete dir="${test.bin.dir}" quiet="true" />
		<mkdir dir="${junit.dir}" />
		<mkdir dir="${junit.data.dir}" />
		<mkdir dir="${junit.reports.dir}" />
		<mkdir dir="${test.bin.dir}" />
	</target>

	<target name="test-compile" depends="compile,test-init">
		<javac destdir="${test.bin.dir}" debug="true" failonerror="false" classpathref="test.compile.classpath" encoding="UTF-8" includeantruntime="true">
			<src path="${test.src.dir}" />
		</javac>
	</target>

	<target name="test-run" depends="test-compile">
		<jacoco:coverage>
			<junit fork="true" forkmode="once" timeout="300000">
				<jvmarg value="-ea" />
				<classpath refid="test.execute.classpath" />
				<formatter type="brief" usefile="false" />
				<formatter type="xml" />
				<batchtest todir="${junit.data.dir}">
					<fileset dir="${test.bin.dir}" includes="**/*Test.class" />
				</batchtest>
			</junit>
		</jacoco:coverage>
		<junitreport todir="${junit.data.dir}">
			<fileset dir="${junit.data.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.reports.dir}">
				<param name="TITLE" expression="JUnit Report for ABC ${revision}" />
			</report>
		</junitreport>
	</target>

	<target name="test" depends="test-run">
		<jacoco:report>
			<executiondata>
				<file file="jacoco.exec" />
			</executiondata>
			<structure name="Test Coverage Report for ABC ${revision}">
				<classfiles>
					<fileset dir="${bin.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>
			<html destdir="coverage" />
		</jacoco:report>
	</target>

	<!-- Javadoc Tasks -->

	<target name="javadoc">
		<delete dir="${javadoc.dir}" quiet="true" />
		<mkdir dir="${javadoc.dir}" />
		<javadoc destdir="${javadoc.dir}" Overview="src/overview.html" author="false" version="true" use="true" windowtitle="API for ABC ${revision}" access="public" classpathref="test.execute.classpath" failonerror="false">

			<packageset dir="${src.dir}" defaultexcludes="yes">
				<include name="**/IF" />
				<include name="**/IF/**" />
				<include name="edu/udel/cis/vsl/abc" />
				<include name="edu/udel/cis/vsl/abc/util" />
			</packageset>

		</javadoc>
	</target>

	<!-- Clean -->

	<target name="clean" description="Delete all generated files.">
		<delete dir="${bin.dir}" />
		<delete dir="${test.bin.dir}" />
		<delete dir="${junit.dir}" />
		<delete dir="${javadoc.dir}" />
		<delete dir="${coverage.dir}" />
		<delete file="${jar-path}" />
		<delete file="${basedir}/jacoco.exec" />
		<delete file="${manifest-file}" />
		<delete file="${grammar.dir}/PreprocessorLexer.tokens" />
		<delete file="${real.src.dir}/preproc/common/PreprocessorLexer.java" />
		<delete file="${grammar.dir}/PreprocessorParser.tokens" />
		<delete file="${real.src.dir}/preproc/common/PreprocessorParser.java" />
		<delete file="${grammar.dir}/PreprocessorExpressionParser.tokens" />
		<delete file="${real.src.dir}/preproc/common/PreprocessorExpressionParser.java" />
		<delete file="${grammar.dir}/CivlCParser.tokens" />
		<delete file="${real.src.dir}/parse/common/CivlCParser.java" />
		<delete file="${grammar.dir}/OmpLexer.tokens" />
		<delete file="${real.src.dir}/preproc/common/OmpLexer.java" />
		<delete file="${real.src.dir}/preproc/common/OmpLexer_PreprocessorLexer.java" />
		<delete file="${grammar.dir}/OmpParser.tokens" />
		<delete file="${real.src.dir}/parse/common/OmpParser.java" />
		<delete file="${real.src.dir}/parse/common/OmpParser_CivlCParser.java" />
	</target>

	<!-- Do everything -->

	<target name="all" depends="jar,test,javadoc" />

</project>
