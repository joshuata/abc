#ifdef __CIVLMPI__
#else
#define __CIVLMPI__

#include <civlc.cvh>
#include <comm.cvh>

#define BCAST_TAG 999
#define REDUCE_TAG 998
#define GATHER_TAG 997
#define SCATTER_TAG 996
#define GATHERV_TAG 995
#define SCATTERV_TAG 994

/* Definition of CIVL-MPI */
typedef enum __MPI_Sys_status__{
  __UNINIT,
  __INIT,
  __FINALIZED
}__MPI_Sys_status__;

/**************************** Redundent Definitions *******************************/
/* The independence between civlmpi.cvh and mpi.h causes redundent definition */
typedef struct MPI_Comm MPI_Comm;
#ifdef __MPI__
#else
typedef struct MPI_Status MPI_Status;
#endif

#ifdef __MPI_DATATYPE__
#else
#define __MPI_DATATYPE__
typedef enum {
    MPI_CHAR,
    MPI_CHARACTER,
    MPI_SIGNED_CHAR,           
    MPI_UNSIGNED_CHAR,
    MPI_BYTE,           
    MPI_WCHAR,          
    MPI_SHORT,          
    MPI_UNSIGNED_SHORT,
    MPI_INT,            
    MPI_INT16_T,
    MPI_INT32_T,
    MPI_INT64_T,
    MPI_INT8_T,
    MPI_INTEGER,
    MPI_INTEGER1,
    MPI_INTEGER16,
    MPI_INTEGER2,
    MPI_INTEGER4,
    MPI_INTEGER8,
    MPI_UNSIGNED,       
    MPI_LONG,          
    MPI_UNSIGNED_LONG, 
    MPI_FLOAT,          
    MPI_DOUBLE,         
    MPI_LONG_DOUBLE,
    MPI_LONG_LONG_INT,  
    MPI_UNSIGNED_LONG_LONG,
    MPI_LONG_LONG,
    MPI_PACKED,
    MPI_LB,
    MPI_UB,
    MPI_UINT16_T,
    MPI_UINT32_T,
    MPI_UINT64_T,
    MPI_UINT8_T,
    MPI_FLOAT_INT,        
    MPI_DOUBLE_INT,       
    MPI_LONG_INT,         
    MPI_SHORT_INT,        
    MPI_2INT,             
    MPI_LONG_DOUBLE_INT,  
    MPI_AINT,
    MPI_OFFSET,
    MPI_2DOUBLE_PRECISION,
    MPI_2INTEGER,
    MPI_2REAL,
    MPI_C_BOOL,
    MPI_C_COMPLEX,
    MPI_C_DOUBLE_COMPLEX,
    MPI_C_FLOAT_COMPLEX,
    MPI_C_LONG_DOUBLE_COMPLEX,
    MPI_COMPLEX,
    MPI_COMPLEX16,
    MPI_COMPLEX32,
    MPI_COMPLEX4,
    MPI_COMPLEX8,
    MPI_REAL,
    MPI_REAL16,
    MPI_REAL2,
    MPI_REAL4,
    MPI_REAL8
} MPI_Datatype;
#endif

/* Definition of CMPI_Gcomm and MPI_Comm */
typedef struct CMPI_Gcomm CMPI_Gcomm;

/****************************** Helper Functions **********************************/
int sizeofDatatype(MPI_Datatype);

/************************** MPI LIB Implementations *******************************/
$abstract double CMPI_time(int i);

CMPI_Gcomm CMPI_Gcomm_create($scope, int);

void CMPI_Gcomm_destroy(CMPI_Gcomm);

MPI_Comm CMPI_Comm_create($scope, CMPI_Gcomm , int);

void CMPI_Comm_destroy(MPI_Comm);

int __MPI_Init(MPI_Comm *);

int __MPI_Finalize(MPI_Comm *);

int CMPI_Send(const void *, int, MPI_Datatype, int, int, $comm);

int CMPI_Recv(const void *, int, MPI_Datatype, int, int, $comm, MPI_Status *);

#endif



