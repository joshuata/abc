/* This header file contains the core definitions of the CIVL-C language,
 * including standard types and function prototypes.
 */

#ifdef __CIVLC_COMMON__
#else
#define __CIVLC_COMMON__

/* *********************  Standard Constants and Types ********************* */

#define $true 1

#define $false 0

#define NULL ((void*)0)

typedef unsigned long int size_t;

/* **************************  Basic CIVL-C Types ************************** */

// Operation for collective reductions or collective operations
// Note: The order of following operations are consistent with CIVL implementations,
// it's not recommended to change the order. 
typedef enum {
  CIVL_NO_OP,  // no operation
  CIVL_MAX,    // maxinum
  CIVL_MIN,    // minimun
  CIVL_SUM,    // sum
  CIVL_PROD,   // product
  CIVL_LAND,   // logical and
  CIVL_BAND,   // bit-wise and
  CIVL_LOR,    // logical or
  CIVL_BOR,    // bit-wise or
  CIVL_LXOR,   // logical exclusive or
  CIVL_BXOR,   // bit-wise exclusive or
  CIVL_MINLOC, // min value and location
  CIVL_MAXLOC, // max value and location
  CIVL_REPLACE // replace ? TODO: Find definition for this operation
}$operation;
 
/* The CIVL-C process reference type */ 
typedef struct __proc__ $proc;

/* The CIVL-C scope type, used to represent a scope */
typedef struct __scope__ $scope;

/* The CIVL-C dynamic type, used to represent a symbolic type */
typedef struct __dynamic__ $dynamic;

/* The integer iterator */
typedef struct __int_iter__ * $int_iter;

/* **************************** Misc. Functions **************************** */

/* Wait for another process p to terminate. */
void $wait($proc p);

/* Blocks until all processes referred to by the given 
   array terminates. */
void $waitall($proc *procs, int numProcs);

/* Terminate the calling process. */
void $exit(void);

/* Nondeterministic choice of integer i, such that 0<=i<n. */
int $choose_int(int n);

/* Returns $true iff p is a defined procecess value (i.e., 
the value of the process id is greater than 0) */
_Bool $proc_defined($proc p);

/* Returns $true iff s is a defined scope value (i.e., 
the scope s is still valid) */
_Bool $scope_defined($scope s);

/* **************************** Memory Functions *************************** */

/* The CIVL-C malloc function, which takes a reference to a scope */
void* $malloc($scope s, int size);

/* The CIVL-C de-allocation function, which takes a pointer, just like 
 * the standard "free" */
void $free(void *p);

/* *************************** Iterator Functions ************************** */

/* Tells whether the integer iterator has any more elements */
_Bool $int_iter_hasNext($int_iter iter);

/* Returns the next element in the iterator (and updates the iterator) */
int $int_iter_next($int_iter iter);

/* Creates a new iterator for an array of integers, and returns the
 * handle of the iterator. */
$int_iter $int_iter_create($scope scope, int *array, int size);

/* Deletes an $int_iter object from the heap. */
void $int_iter_destroy($int_iter iter);

void $set_default(void *obj);

void $apply(void *obj1, $operation op, void *obj2, void *result);

#endif
